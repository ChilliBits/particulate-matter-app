/*
 * Copyright Â© Marc Auberer 2017 - 2020. All rights reserved
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.mrgames13.jimdo.feintaubapp"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 3500
        versionName "3.5.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    // Base dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.14.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    //implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    implementation 'com.google.android.material:material:1.2.0-alpha04'

    // Room dependencies
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Maps dependencies
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.libraries.places:places:2.2.0'
    implementation 'com.google.maps.android:android-maps-utils:0.6.2'

    // ZXing dependencies
    implementation 'com.google.zxing:core:3.4.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.0.2'

    // Testing dependencies
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // External dependencies
    implementation 'com.fxn769:bubbletabbar:1.0.3'
    implementation 'com.miguelcatalan:materialsearchview:1.4.0'
    implementation 'com.github.coyarzun89:fabtransitionactivity:0.2.0'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.19'

    // Local dependencies
    // implementation fileTree(dir: 'libs', include: ['*.jar'])
}

// Task for downloading all translation files
task downloadTranslations {
    group 'pre-build tasks'
    description 'Downloads all translation files when building the app.'

    ext.apiKey1 = '7qUo-LUKd4VIHSwRYB5005T7QQbaFCGw'
    ext.apiKey2 = 'mg24uL96-mSwhchnk4LnJAzeyBtOsYy3'

    // English
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values/strings.xml")
        new URL("https://localise.biz/api/export/locale/en.xml?format=android&key=${apiKey1}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // Bulgarian
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-bg/strings.xml")
        new URL("https://localise.biz/api/export/locale/bg.xml?format=android&key=${apiKey1}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // Dutch
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-nl/strings.xml")
        new URL("https://localise.biz/api/export/locale/nl.xml?format=android&key=${apiKey1}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // French
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-fr/strings.xml")
        new URL("https://localise.biz/api/export/locale/fr.xml?format=android&key=${apiKey1}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // Italian
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-it/strings.xml")
        new URL("https://localise.biz/api/export/locale/it.xml?format=android&key=${apiKey1}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // Polish
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-pl/strings.xml")
        new URL("https://localise.biz/api/export/locale/pl.xml?format=android&key=${apiKey1}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // Romanian
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-ro/strings.xml")
        new URL("https://localise.biz/api/export/locale/ro.xml?format=android&key=${apiKey1}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // Russian
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-ru/strings.xml")
        new URL("https://localise.biz/api/export/locale/ru.xml?format=android&key=${apiKey1}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // German
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-de/strings.xml")
        new URL("https://localise.biz/api/export/locale/de.xml?format=android&key=${apiKey2}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // Spanish
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-es/strings.xml")
        new URL("https://localise.biz/api/export/locale/es.xml?format=android&key=${apiKey2}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
    // Hungarian
    doLast {
        def f = new File("${project.projectDir}/src/main/res/values-hu/strings.xml")
        new URL("https://localise.biz/api/export/locale/hu.xml?format=android&key=${apiKey2}").withInputStream { i ->
            f.withOutputStream { it << i }
        }
    }
}

preBuild.dependsOn downloadTranslations